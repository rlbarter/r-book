{
  "hash": "e765bf4d493c73d7856b55f699375c4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualization with ggplot2\"\nformat: html\neditor_options: \n  chunk_output_type: console\nembed-resources: true\n---\n\n\n\n\n\n\n\nNow that we have learned how to manipulate our data, it's time to learn how to visualize it! \n\nThe bread-and-butter of data visualization in R is the ggplot2 library. Just as the dplyr functions we learned in the previous chapter, together with the pipe `|>`, equipped us with an intuitive \"flowy\" data manipulation \"grammar\", if you will; ggplot2's \"layered grammar of graphics\" equips us with a similarly intuitive grammar for creating data visualizations. In fact, the \"*gg*\" in \"*ggplot2*\" stands for \"*grammar of graphics*\"; the \"*plot*\" stands for \"*plot*\", and the \"*2*\" stands for \"*2*\" (as in, this is the second iteration of the ggplot library that Hadley Wickham created, the first being lost to the ether.)\n\nIn this chapter, we're going to continue working with the gapminder dataset, and since this is a new quarto document, we need to load it again:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ngapminder <- read_csv(\"data/gapminder.csv\")\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNote that I also loaded the tidyverse library again. While all of the data visualization functions I'm going to use in this chapter come from the ggplot2 library; ggplot, like dplyr from the previous chapter, is one of the core tidyverse packages. This means that rather than loading ggplot2 independently (`library(ggplot2)`), I typically just load the tidyverse library instead (`library(tidyverse)`), since this will load both the ggplot2 library and the dplyr library at the same time.\n\nOur goal in this chapter is to learn how to write the code to create really nice publication-ready data visualizations (as well as quick-and-dirty non-publication ready visualizations--but those are less impressive) like this:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ngapminder |>\n  filter(year == 2007) |>\n  ggplot() + \n  geom_point(aes(x = gdpPercap, \n                 y = lifeExp, \n                 color = continent,\n                 size = pop),\n             alpha = 0.6) + \n  scale_x_log10() + \n  labs(x = \"GDP per capita\", y = \"Life expectancy\", title = \"GDP per cap vs life expectancy\", size = \"population\") + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nIt's worth also noting what this chapter *won't* cover, which is the principles for creating data visualiations that tell a clear and unambiguous story, and deciding *which* data visualizations to use to answer your specific question (or how to come up with good questions, for that matter). I can, however, point you in the direction of some resources that *do* teach you some of these things, such as [Storytelling with Data](https://www.storytellingwithdata.com/books) by Cole Nussbaumer Knaflic, which is a great resources for learning how to produce effective graphics in general, [R for the Rest of Us: A Statistics-Free Introduction](https://book.rfortherestofus.com/) by David Keyes, and even the chapter on data visualization of my book with Bin Yu, [Veridical Data Science](https://vdsbook.com/05-data_viz).\n\n\nFortunately, once armed with the dplyr functions from the previous chapter, and the ggplot2 functions from this chapter, you'll have the coding skills you need to tackle almost any dataset that comes your way.\n\n## The ggplot2 canvas\n\nTo create a ggplot figure, you start by creating an empty ggplot2 \"canvas\" using the `ggplot()` function. Our \"canvas\" here is the following grey box:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nThe first thing I need to do is to tell ggplot which dataset object (generally, a data frame/tibble) I am going to use to create my plot, and I do that by providing the name of my data object as the argument of `ggplot()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder)\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nNothing has changed on our canvas, but now when we add some \"layers\" to our plot, ggplot can find the variables that exist within our dataset. \n\nTo *add* a layer to my plot, I literally use the plus symbol, `+`. The name of the layer that creates a scatterplot is `geom_point()` (because a scattplot is made up of a collection of \"points\").\n\nI can add my points layer like this:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `geom_point()`:\n! Problem while setting up geom.\nℹ Error occurred in the 1st layer.\nCaused by error in `compute_geom_1()`:\n! `geom_point()` requires the following missing aesthetics: x and y.\n```\n\n\n:::\n:::\n\n\n\n\n\n\nBut I got an error because I haven't told ggplot which columns/variables in my data I want to use to define my scatterplot. Specifically, I need to tell it which columns should define the x- and y-coordinates of my scatterplot points. I do that by providing an \"aesthetics\" function as the argument of my points layer, in which I specify which column defines the x-coordinate (`x = gdpPercap`) and which column defines the y-coordinate (`y = lifeExp`).\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_point(aes(x = gdpPercap, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nNow we have our scatterplot, and ggplot has even very kindly provided x- and y-axis names! Gee, thanks!\n\n\nUnfortunately ggplot is a little bit dumb, and it can only find your data frame columns when they are referenced inside the `aes()` function.\n\nIf I reproduced this code without the `aes()` function, I get an error telling me that `'gdpPercap'` cannot be found:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_point(x = gdpPercap, y = lifeExp)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'gdpPercap' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\nBasically, if I try to reference a column from my data frame outside of the `aes()` function, ggplot will look for an object in my space with the same name as the column, in this case `gdpPercap`, and it won't be able to find one! \n\nI like to think of the aesthetics function `aes()` as a secret code that tells ggplot that the objects I'm referring to are columns of my data frame.\n\n\n\nSince `ggplot()` is just a function, I can also pipe my data into it like this:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  ggplot() + \n  geom_point(aes(x = gdpPercap, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWhy might I want to do that? I do this a lot, usually because I often want to make minor modifications to my data before plotting it (but I don't want to create a new intermediate object).\n\nFor example, if I want to recreate this scatterplot just for the year 2007, I could conduct a filter step and then pipe my filtered data frame into `ggplot()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  ggplot() +\n  geom_point(aes(x = gdpPercap, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n:::{.warning}\n## `+` versus `|>`\n\nProbably one of the most common errors I make when doing data analysis is getting confused about when I should use `+` and when I should use `|>`. \n\nWhen we are adding ggplot layers, we always use `+`, but when we are chaining functions together, we use the pipe, `|>`. \n\nTo understand why, remember that the pipe, `|>` takes the object on the left and places it into the first argument of the function on the right. This is not what our ggplot2 functions are doing though, these are layering objects on top of one another, and so they use `+` instead of `|>`.\n\nTake a look at this code, and notice when we use `+` versus `|>`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  ggplot() +\n  geom_point(aes(x = gdpPercap, y = lifeExp))\n```\n:::\n\n\n\n\n\n\n:::\n\n\nThe alternative to applying my filtering step and creating my plot all at once is defining a new object just containing the gapminder data for 2007, and providing this filtered data frame object as the argument of the `ggplot()` function:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define a new data frame\ngapminder_2007 <- gapminder |> filter(year == 2007)\n# provide this data frame as the argument of my ggplot() function\nggplot(gapminder_2007) +\n  geom_point(aes(x = gdpPercap, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWhen do you think I might prefer to do the \"all-at-once\" approach:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(year == 2007) |> \n  ggplot() +\n  geom_point(aes(x = gdpPercap, y = lifeExp))\n```\n:::\n\n\n\n\n\n\nversus defining an intermediate `gapminder_2007` object and then creating my plot with `ggplot(gapminder_2007)`:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_2007 <- gapminder |> filter(year == 2007)\nggplot(gapminder_2007) +\n  geom_point(aes(x = gdpPercap, y = lifeExp))\n```\n:::\n\n\n\n\n\n\n\nBasically, if I am going to use the filtered version of data for anything other than just this single plot (e.g., if I am going to create several plots using just the data from 2007), then I would prefer to define the `gapminder_2007` object and use this in my `ggplot()` argument, rather than conduct the filtering every time. But if this is the only time I am going to use this 2007 data, then I would prefer to avoid defining an unnecessary object. \n\nIn general, if you are performing the same action multiple times, for example, to create several different plots, then it's more efficient to create an object that you can reuse.\n\nFor instance, having defined `gapminder_2007`, I can use it to also create a different plot, this time a histogram of `lifeExp` values in 2007:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) +\n  geom_histogram(aes(x = lifeExp))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nNote that to create a histogram using `geom_histogram()`, I just need to give it the x-axis variable, `lifeExp`, and it will do all of the binning and tallying up of counts needed to determine the y-axis for me.\n\n\n\n### Exercise\n\nCreate a ggplot scatterplot of population against life expectancy for all countries in Europe in 2002\n\n#### Solution\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent == \"Europe\", year == 2002) |>\n  ggplot() + \n  geom_point(aes(x = pop, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Exercise\n\nCreate a ggplot histogram of the GDP per capita in 2002\n\n#### Solution\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2002) |>\n  ggplot() + \n  geom_histogram(aes(x = gdpPercap))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Defining ggplot2 aesthetics\n\n`x` and `y` are \"aesthetic\" properties of the points in a scatterplot, and `x` is an \"aesthetic\" property of the bars in a histogram. But they aren't the *only* aesthetic properties that we can specify! \n\nFor example, some other scatterplot aesthetic properties that we can specify include `color`, `size`, and `shape`.\n\nYou can specify the `color` of the points using the `color` aesthetic:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nIn this example, I'm specifying `color = continent` inside the `aes()` function, which, because it is inside the `aes()` function, this tells ggplot2 that `continent` is a column in my data and that it should come up with a unique color for each unique `continent` value. \n\nWhat if I wanted to just make all of the points in my scatterplot \"blue\" instead of based on the continent column, like this:\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nIf I try to just replace `color = continent` with `color = \"blue\"` (where I'm providing quotes around \"blue\" because I want to specifically pass the *character* value \"blue\", not a column or variable callued `blue`), it doesn't work:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, y = lifeExp, color = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSince `color = \"blue\"` is specified *inside* the `aes()` function, ggplot is looking for a column inside the `gapminder` data frame called `\"blue\"`, and since it can't find one, it just creates one and populates it entirely with the value \"blue\" for all data points, so what we end up with is a scatterplot whose color is deteremined by a categorical variable whose value consists of a single value, which is just the word \"blue\", and since this variable only has a single value, ggplot only provides one color, and this color is just the first default ggplot2 color which is this nice \"salmony\" color.\n\nIf you want to define an aesthetic of your plot that does *not* depend on a column in your data, you need to specify it *outside* the `aes()` function. If we just move the `color = \"blue\"` argument *outside* `aes()`, we get what we wanted:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, y = lifeExp), color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Exercise\n\nRecreate the scatterplot of `lifeExp` and `gdpPercap` in 2007, but use the `continent` column to specify the `shape` aesthetic\n\n#### Solution\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, \n                 y = lifeExp, \n                 shape = continent))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Exercise\n\nRecreate the scatterplot of `lifeExp` and `gdpPercap` in 2007, but make all points have a \"triangle\" shape.\n\n#### Solution\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, \n                 y = lifeExp), \n             shape = \"triangle\")\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Transparency\n\nSometimes when you have a lot of data points all sitting ontop of one another, it can be helpful to add some transparency. You can do this using the `alpha` argument. \n\n`alpha` takes values between 0 and 1. `alpha = 1` is not transparent at all, and `alpha = 0` is completely transparent. The scatterplot below has `alpha = 0.5`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, y = lifeExp), \n             alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSince we are not using a column/variable in the data frame to specify `alpha`, note that it is *outside* the `aes()` function of `geom_point()`.\n\n\n\n\n### Exercise \n\nRecreate the 2007 `gdpPercap` vs `lifeExp` plot where each point has color determined by `continent`, size determined by `pop`, and all the points have a transparency of 0.5.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, y = lifeExp, \n                 color = continent, size = pop), \n             alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n## Other kinds of plots\n\n### Line plots\n\nLine plots are great for showing how things change over time. \n\nIf I want to see how `lifeExp` changes by year, I can try to create a line plot using `geom_line()` with `lifeExp` on the y-axis, and `year` on the x-axis:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_line(aes(x = year, \n                y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nUgh. gross. I don't like this plot at all. It looks terrible. What's with all the zigzags?\n\nCan you figure out what's going on in this plot? As a hint... how many `lifeExp` values do we have for each `year`? We have many! One for each country (and there are almost 200 countries!) \n\nHere are all the `lifeExp` values corresponding to 1962\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 1962) |> \n  select(year, country, lifeExp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 3\n    year country     lifeExp\n   <dbl> <chr>         <dbl>\n 1  1962 Afghanistan    32.0\n 2  1962 Albania        64.8\n 3  1962 Algeria        48.3\n 4  1962 Angola         34  \n 5  1962 Argentina      65.1\n 6  1962 Australia      70.9\n 7  1962 Austria        69.5\n 8  1962 Bahrain        56.9\n 9  1962 Bangladesh     41.2\n10  1962 Belgium        70.2\n# ℹ 132 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nso the vertical lines we see in our \"line plot\" above correspond to the range of `lifeExp` values for each year, and then it probably just connects the final `lifeExp` value that year to the first `lifeExp` value for the next year, and those are the diagonal lines that we see.\n\nIn general, to create a single line, we want just *one* value for the y-axis (e.g., `lifeExp`) per x-axis value (e.g., `year`). To satisfy this requirement, we can look at the data for just *one* country\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(country == \"Australia\") |>\n  select(year, country, lifeExp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n    year country   lifeExp\n   <dbl> <chr>       <dbl>\n 1  1952 Australia    69.1\n 2  1957 Australia    70.3\n 3  1962 Australia    70.9\n 4  1967 Australia    71.1\n 5  1972 Australia    71.9\n 6  1977 Australia    73.5\n 7  1982 Australia    74.7\n 8  1987 Australia    76.3\n 9  1992 Australia    77.6\n10  1997 Australia    78.8\n11  2002 Australia    80.4\n12  2007 Australia    81.2\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNow, we have just one `lifeExp` value for each `year`, and we could create a line plot using these values:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(country == \"Australia\") |>\n  ggplot() +\n  geom_line(aes(x = year, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nGee wiz! That looks way better! It's a single line, and boy-oh-boy it sure looks like we Aussies are living longer and longer! Onya Mate!\n\nI could make the same plot for the US, by filtering to the US instead of Australia:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(country == \"United States\") |>\n  ggplot() +\n  geom_line(aes(x = year, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWhat if I wanted to make a plot with *both* of these lines on it?\n\n\nWell there are a few ways I could do that. One is good, and another is not so good.\n\nI'll show you the not-so-good approach first, just so you can really appreciate the good approach.\n\nThe not-so-good approach involfe creating data frames for Australia and the US and adding multiple line layers. The first line layer will be just using `gapminder_us`, the data frame for the US and the second line layer will have its own `data` argument to which I'll pass `gapminder_au`, the data frame for Australia:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the data frame for the US\ngapminder_us <- gapminder |>\n  filter(country == \"United States\")\n\n# define the data frame for the australia\ngapminder_au <- gapminder |>\n  filter(country == \"Australia\")\n\n# Create a line plot for the US and then add a line plot layer for Australia\nggplot(gapminder_us) +\n  geom_line(aes(x = year, y = lifeExp)) +\n  geom_line(aes(x = year, y = lifeExp),\n            data = gapminder_au)\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nHere the first `geom_line()` layer is based on the `gapminder_us` data frame provided as the argument of `ggplot()`, and the second one is based on the `gapminder_au` data frame provided in the `data` argument of the second `geom_line()` layer (when you don't provide a `data` argument, each layer will be based on the data frame provided to `ggplot()`)\n\nWhile this technically works, this approach sucks for a few reasons. First, I can't tell which line is which. There is no legend (and it's unfortunately not all that easy to add a legend manually to a ggplot2 figure). Another reason this approach sucks is that it's not scalable. If I wanted to do this for 10 countries, I'd have to create 10 different data frames and add 10 line layers to my plot! No thanks.\n\n\nInstead of adding separate line layers for each country, I can instead use the `color` or `group` aesthetic to tell `ggplot()` that I want separate lines for each country, say.\n\nIn the code below, I create a data frame that contains the data for both Australia and the US, and then I create a ggplot2 line plot, specifying `color = country` inside my `aes()` function, which will give me a separate line for each country:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Australia\", \"United States\")) |>\n  ggplot() +\n  geom_line(aes(x = year, y = lifeExp, color = country))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nAn alternative if I want a separate line for each country, but I don't want each line to have a different color, is to use the `group` aesthetic instead of the `color` aesthetic:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Australia\", \"United States\")) |>\n  ggplot() +\n  geom_line(aes(x = year, y = lifeExp, group = country))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nThe following code create a line plot of lifeExp by year for each country on the Americas content (with no colors or legend).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(continent == \"Americas\") |> \n  ggplot() + \n  geom_line(aes(x = year, \n                y = lifeExp, \n                group = country))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n### Exercise\n\nCompute the average life expectancy for each continent for each year, and then create a line plot of the average life expectancy for each continent over time (each continent should have it's own different colored line).\n\nHere is an example of the plot I want you to make:\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n#### Solution\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  group_by(continent, year) |> \n  summarize(mean_life_exp = mean(lifeExp)) |> \n  ggplot() +\n  geom_line(aes(x = year, \n                y = mean_life_exp, \n                color = continent))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n### Boxplots\n\nLike scatterplots created with `geom_point()`, boxplots created with a `geom_boxplot()` layer desire an `x` and a `y` aesthetic, however, unlike `geom_point()` which wants both the `x` and `y` variables to be continuous numeric variables, `geom_boxplot()` wants *one* of the `x` and `y` aesthetics to be a categorical (character or factor) variable and the other one to be numeric--`geom_boxplot()` will create a separate boxplot for each categorical value.\n\nFor example, below we create a boxplot of `lifeExp` for each value of `continent`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_boxplot(aes(x = continent, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nThe bottom of the box of a boxplot corresponds to $Q_1$, the first quartile of the variable (the value for which 25% of values are less than it) and the top of the box corresponds to the third quartile, $Q_3$ of the variable (the value for which 75% of values are less than it). The bar in the middle is the median, which corresponds to the second quartile, $Q_2$ (the value for which 50% of values are less than it). The lines that extend from the bottom and top of the boxplot reach as far as $Q_1 - 1.5 (Q_3 - Q_1)$ and $Q_3 + 1.5 (Q_3 - Q_1)$, respectively, and all values that are outside this range are shown as points and are called \"outliers.\"\n\nIf you switch the `x` and the `y` so that the `y` aesthetic is the categorical/character `continent` variable, then you get horizontal boxplots instead.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_boxplot(aes(x = lifeExp, y = continent))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n`geom_boxplot()` is great for creating side-by-side boxplots for the different levels/values of a categorical variable. \n\n\nBut you can create single boxplots for an entire variable, such as `lifeExp`, by just providing `y = lifeExp` to your aesthetic function (leaving `x` out entirely):\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_boxplot(aes(y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nBut I rarely do this--I find that boxplots are most helpful for *comparing* the distributions of a variable across different groups.\n\n\n\n### Histograms\n\nIf I want to look at the distribution of a single variable, I find it more useful to use a histogram, such as the histogram of `lifeExp` below:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_histogram(aes(x = lifeExp))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nA histogram essentially takes the range of a continuous numeric variable, chops it up into binned intervals, and then uses bars to represent how many values fall into each binned interval.\n\nI don't really like that the histogram doesn't provide outlines for each of the bars, so I often add them in by providing a `color` value *outside* the `aes()` function:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_histogram(aes(x = lifeExp), \n                 color = \"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nNotice that `color` here refers to the *outline* of the bars, rather than the bars themselves. If you want the bars themselves to have a different color, you need to use the `fill` aesthetic.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_histogram(aes(x = lifeExp), \n                 color = \"white\",\n                 fill = \"cornflowerblue\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nYou can also provide a `fill` to your histogram where the bars are colored using a categorical variable, such as `continent`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_histogram(aes(x = lifeExp, fill = continent), \n                 color = \"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nBut be warned that these bars are *\"stacked\"* on top of one another, so the overall shape is the same as that of the entire variable in the histograms above.\n\nIf you want to compare the distributions of the `lifeExp` variable across each continent where each continent's histogram starts from 0, you need to specify an additional argument to `geom_histogram()` that is `position = \"identity\"`. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_histogram(aes(x = lifeExp, fill = continent), \n                 color = \"white\",\n                 position = \"identity\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nNow each continent's histograms start at y = 0, but because they are opaque, it is a hard to see the distributions where they overlap.\n\nThis is another place where transparency comes in handy! If we set `alpha = 0.5`, we can see a bit more easily how the distributionso overlap.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_histogram(aes(x = lifeExp, fill = continent), \n                 color = \"white\",\n                 position = \"identity\",\n                 alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nThis plot is a bit busy though, so it might be a bit easier to just compare two groups, such as \"Europe\" and \"Africa\":\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent %in% c(\"Europe\", \"Africa\")) |>\n  ggplot() + \n  geom_histogram(aes(x = lifeExp, fill = continent), \n                 color = \"white\",\n                 position = \"identity\",\n                 alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n### Bar charts\n\nA bar chart is like a histogram, but for categorical variables instead of continuous numeric ones.\n\n\nYou can create a *count* bar chart, by providing a categorical (character/factor) variable as your x-aesthetic to `geom_bar()`, which will then add up how many times each value of the categorical variable appears and use this as the height of the bars:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a bar chart of the continent *counts*\nggplot(gapminder) +\n  geom_bar(aes(x = continent))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nIf you want to create bar charts where you specify the height of each bar based on a variable in your data, you want to use `geom_col()` instead of `geom_bar()`.\n\nFor example, below, I create a bar chart that shows the *average life expectancy* for each continent, first you have to calculate the average life expectancy for each continent, and then you can pipe that into ggplot with a `geom_col()` layer that uses `x = continent` as the x-aesthetic that specifies how many bars there are (and their names), and your calculated `y = mean_life_exp` as the height aesthetic.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  group_by(continent) |>\n  summarize(mean_life_exp = mean(lifeExp)) |>\n  ggplot() +\n  geom_col(aes(x = continent, y = mean_life_exp))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nNote that like histograms, you can give each bar a color using the `fill` aesthetic.\n\nTo give each bar a different color per continent, provide `fill = continent` *inside* the `aes()` function:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  group_by(continent) |>\n  summarize(mean_life_exp = mean(lifeExp)) |>\n  ggplot() +\n  geom_col(aes(x = continent, y = mean_life_exp, fill = continent))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nAnd to give each bar the same global color, provide your color to `fill` *outside* the `aes()` function:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  group_by(continent) |>\n  summarize(mean_life_exp = mean(lifeExp)) |>\n  ggplot() +\n  geom_col(aes(x = continent, y = mean_life_exp),\n           fill = \"cornflowerblue\")\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Getting fancy with ggplot2\n\nNow that you've seen the most common ggplot2 layers that I typically use, let's talk about how to do even fancier things with them.\n\n### Transformations\n\nYou can apply log-scale transformations to your axis by adding a scale layer. Below, the layer `scale_x_log10()` converts the x-axis to a $\\log_{10}$ scale, so each break increases by an order of magnitude rather than by a fixed amount.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, \n                 y = lifeExp, \n                 color = continent)) + \n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nBecause I want to keep using this plot as I show you more cool things, I'm going to save it as a variable!\n\nI can do this by assigning it to a new variable name like this:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_gdp_scatter <- ggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, \n                 y = lifeExp, \n                 color = continent)) + \n  scale_x_log10()\n```\n:::\n\n\n\n\n\n\nAs usual, when I define this variable, no output is shown, but I can look at the object contained in this variable by typing its name:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_gdp_scatter\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nAnd the super neat thing is that because this is just a ggplot object, I can keep adding things to it!\n\n\n### Labels\n\nYou can clean the labels of your figure by adding a `labs()` layer. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_gdp_scatter + \n  labs(x = \"GDP per capita\", \n       y = \"Life expectancy\", \n       title = \"GDP per cap vs life expectancy\")\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nThis is equivalent to replacing `life_gdp_scatter` with the code that was used to define it\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder_2007) + \n  geom_point(aes(x = gdpPercap, \n                 y = lifeExp, \n                 color = continent)) + \n  scale_x_log10() +\n  labs(x = \"GDP per capita\", \n       y = \"Life expectancy\", \n       title = \"GDP per cap vs life expectancy\")\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nAnd I'm going to update my scatterplot object to contain these new labels:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_gdp_scatter <- life_gdp_scatter + \n  labs(x = \"GDP per capita\", \n       y = \"Life expectancy\", \n       title = \"GDP per cap vs life expectancy\")\n```\n:::\n\n\n\n\n\n\n\n\n### Themes\n\nNext, I want to give my figure a theme by adding a themes layer. There are a lot of theme options. My favorite is `theme_classic()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_gdp_scatter + theme_classic()\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nAnother popular one is `theme_bw()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_gdp_scatter + theme_bw()\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nand `theme_minimal()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_gdp_scatter + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nBut there are [lots of others too](https://ggplot2.tidyverse.org/reference/ggtheme.html).\n\n\n\n\n\n\n\n### Faceted grids\n\nThe last neat ggplot2 thing I want to show you is how to create a grid of plots using `facet_wrap()`.\n\nIf I have a bunch of line plots on the same plot like this:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent == \"Americas\") |>\n  ggplot() + \n  geom_line(aes(x = year, \n                y = lifeExp, \n                group = country))\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nI might find myself wishing that I had a separate plot for each country, but I don't want to actually write the code to create a separate line plot for each country manually.\n\nFortunately, `facet_wrap()` (and `facet_grid()`) can do this for me. Below I take the exact same code and I add a `facet_wrap()` layer where I specify which categorical variable in my data I want to use to specify the different plot panels (I write `~country` to create a separate panel for each value in country). This is essentially just taking each line in the plot above and giving it its own plot. Each plot will inherit the aesthetic properties of the `geom_line()` layer.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent == \"Americas\") |>\n  ggplot() + \n  geom_line(aes(x = year, \n                y = lifeExp)) +\n  facet_wrap(~country)\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nThis plot is all cramped, but if I add some `#| fig-height` and `#| fig-width` options to the top of my code chunk, I can control its size, such as\n\n\n```{{r}}\n#| fig-height: 8\n#| fig-width: 8\ngapminder |>\n  filter(continent == \"Americas\") |>\n  ggplot() + \n  geom_line(aes(x = year, \n                y = lifeExp)) +\n  facet_wrap(~country)\n```\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-61-1.png){width=768}\n:::\n:::\n\n\n\n\n\n\n\nNote that I also rotated my x-axis text 90 degrees using a `theme()` layer. If you want to start truly customizing your your ggplots, you're going to get intimately familiar with the `theme()` layer options.\n\n\n\nYou can also specify the number of columns in your faceted grid using the `ncol` argument:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent == \"Americas\") |>\n  ggplot() + \n  geom_line(aes(x = year, \n                y = lifeExp)) +\n  facet_wrap(~country, ncol = 4)\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-62-1.png){width=768}\n:::\n:::\n\n\n\n\n\n\n### Exercise\n\nCreate a faceted grid of scatterplots of `lifeExp` against `gdpPercap` in 2007 for each continent. Do some fancy things to make your plot sparkle!\n\n#### Solution\n\nHere is a base plot without any fun:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_2007 |>\n  ggplot() +\n  geom_point(aes(x = lifeExp, y = gdpPercap)) +\n  facet_wrap(~continent)\n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nHere is a plot with some fun:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_2007 |>\n  ggplot() +\n  geom_point(aes(x = lifeExp, \n                 y = gdpPercap,\n                 size = pop,\n                 color = continent),\n             alpha = 0.5) +\n  scale_x_log10() +\n  scale_y_log10() +\n  theme_minimal() +\n  facet_wrap(~continent) +\n  labs(x = \"Life Expectancy\",\n       y = \"GDP per Capita\",\n       size = \"Population\",\n       color = \"Continent\") \n```\n\n::: {.cell-output-display}\n![](08_ggplot2_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "08_ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}