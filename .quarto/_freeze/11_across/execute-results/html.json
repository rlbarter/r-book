{
  "hash": "468d360cabbb92277da8a9580341a409",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Across\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\nIn this lesson, we will introduce the `across()` function, which can be used to apply dplyr functions like mutate, summarize, select, etc to subsets of columns that satisfy certain criteria, such as to all numeric columns, or all columns that start with `age_`.\n\nWe will continue working with the demographics data, so let's first load the tidyverse and load the demographics data object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ndemographics <- read_csv(\"data/demographics.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10175 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): interview_examination, gender, race, marital_status, pregnant\ndbl (9): respondent_id, age_years, age_months_sc_0_2yr, six_month_period, ag...\nlgl (5): served_active_duty_us, served_active_duty_foreign, born_usa, citize...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(demographics)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n  respondent_id interview_examination gender age_years age_months_sc_0_2yr race \n          <dbl> <chr>                 <chr>      <dbl>               <dbl> <chr>\n1         73557 both interview and e… male          69                  NA black\n2         73558 both interview and e… male          54                  NA white\n3         73559 both interview and e… male          72                  NA white\n4         73560 both interview and e… male           9                  NA white\n5         73561 both interview and e… female        73                  NA white\n6         73562 both interview and e… male          56                  NA mexi…\n# ℹ 13 more variables: six_month_period <dbl>, age_months_ex_0_19yr <dbl>,\n#   served_active_duty_us <lgl>, served_active_duty_foreign <lgl>,\n#   born_usa <lgl>, citizen_usa <lgl>, time_in_us <dbl>, education_youth <dbl>,\n#   education <dbl>, marital_status <chr>, pregnant <chr>,\n#   language_english <lgl>, household_income <dbl>\n```\n\n\n:::\n:::\n\n\n\nLet's suppose that our task is to convert all character columns of the demographics data to upper-case. The function that we are trying to apply is the `toupper()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoupper(\"abc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ABC\"\n```\n\n\n:::\n:::\n\n\n\nBefore introducing across, let's first see one way that we could do this using the `map()` functions that we have just learned (there are often multiple ways of doing the same thing):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# one way to convert all character columns to uppercase\n# creating a boolean/logical vector for identifying character columns\ncharacter_cols <- map_chr(demographics, class) == \"character\"\n# re-assinging the character columns to an upper-case version of themselves\ndemographics[character_cols] <- map_df(demographics[character_cols], toupper)\ndemographics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 BOTH INTERVIEW AND EXAM MALE          69                  NA\n 2         73558 BOTH INTERVIEW AND EXAM MALE          54                  NA\n 3         73559 BOTH INTERVIEW AND EXAM MALE          72                  NA\n 4         73560 BOTH INTERVIEW AND EXAM MALE           9                  NA\n 5         73561 BOTH INTERVIEW AND EXAM FEMALE        73                  NA\n 6         73562 BOTH INTERVIEW AND EXAM MALE          56                  NA\n 7         73563 BOTH INTERVIEW AND EXAM MALE           0                   5\n 8         73564 BOTH INTERVIEW AND EXAM FEMALE        61                  NA\n 9         73565 INTERVIEW ONLY          MALE          42                  NA\n10         73566 BOTH INTERVIEW AND EXAM FEMALE        56                  NA\n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <lgl>, citizen_usa <lgl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\nWhile this works, it is fairly convoluted, is hard to read, and involves defining an intermediate variable (`character_cols`) -- in the tidyverse style, it is generally recommended to *avoid* defining intermediate variables whenever possible.\n\n\nSince the code above modified our demographics data, let's load it in again to revert `demographics` to the original unmodified version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics <- read_csv(\"data/demographics.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10175 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): interview_examination, gender, race, marital_status, pregnant\ndbl (9): respondent_id, age_years, age_months_sc_0_2yr, six_month_period, ag...\nlgl (5): served_active_duty_us, served_active_duty_foreign, born_usa, citize...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndemographics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male          69                  NA\n 2         73558 both interview and exam male          54                  NA\n 3         73559 both interview and exam male          72                  NA\n 4         73560 both interview and exam male           9                  NA\n 5         73561 both interview and exam female        73                  NA\n 6         73562 both interview and exam male          56                  NA\n 7         73563 both interview and exam male           0                   5\n 8         73564 both interview and exam female        61                  NA\n 9         73565 interview only          male          42                  NA\n10         73566 both interview and exam female        56                  NA\n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <lgl>, citizen_usa <lgl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\n## Introducing across()\n\nWe could instead do this kind of operation using a `mutate()` operation in conjunction with `across()`.\n\nFirst, if we were to conduct our uppercase operation for just one character column, say, `interview_examination`, then we could do this using a mutate function as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# just for the interview_examination column\ndemographics |> mutate(interview_examination = toupper(interview_examination))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 BOTH INTERVIEW AND EXAM male          69                  NA\n 2         73558 BOTH INTERVIEW AND EXAM male          54                  NA\n 3         73559 BOTH INTERVIEW AND EXAM male          72                  NA\n 4         73560 BOTH INTERVIEW AND EXAM male           9                  NA\n 5         73561 BOTH INTERVIEW AND EXAM female        73                  NA\n 6         73562 BOTH INTERVIEW AND EXAM male          56                  NA\n 7         73563 BOTH INTERVIEW AND EXAM male           0                   5\n 8         73564 BOTH INTERVIEW AND EXAM female        61                  NA\n 9         73565 INTERVIEW ONLY          male          42                  NA\n10         73566 BOTH INTERVIEW AND EXAM female        56                  NA\n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <lgl>, citizen_usa <lgl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\nTo do this for *all* character columns, you need to provide `across()` to the argument of your mutate function. The `across()` function has two arguments:\n\n- The first argument is a \"select statement\" that specifies which columns you want to apply your function to. Since we want to apply our `toupper` function to all character columns, we use the `where()` function to provide a logical function, which, when applied to all columns, will only output `TRUE` for the character columns, resulting in them being selected for computation. \n\n- The second argument is the function name, `toupper`, that we want to apply to all columns that are selected as a result of the first argument.\n\nThe result is that `toupper()` is applied to all columns where `is.character()` would result in `TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(across(where(is.character), toupper))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 BOTH INTERVIEW AND EXAM MALE          69                  NA\n 2         73558 BOTH INTERVIEW AND EXAM MALE          54                  NA\n 3         73559 BOTH INTERVIEW AND EXAM MALE          72                  NA\n 4         73560 BOTH INTERVIEW AND EXAM MALE           9                  NA\n 5         73561 BOTH INTERVIEW AND EXAM FEMALE        73                  NA\n 6         73562 BOTH INTERVIEW AND EXAM MALE          56                  NA\n 7         73563 BOTH INTERVIEW AND EXAM MALE           0                   5\n 8         73564 BOTH INTERVIEW AND EXAM FEMALE        61                  NA\n 9         73565 INTERVIEW ONLY          MALE          42                  NA\n10         73566 BOTH INTERVIEW AND EXAM FEMALE        56                  NA\n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <lgl>, citizen_usa <lgl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\n## More across examples\n\n### Add 100 to all `age_` columns\n\nLet's first look at another `mutate()` example, where this time, we want to add 100 to all columns whose name starts with `age_`.\n\nIf we were to do this to just the `age_years` column, our code would look like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(age_years = age_years + 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male         169                  NA\n 2         73558 both interview and exam male         154                  NA\n 3         73559 both interview and exam male         172                  NA\n 4         73560 both interview and exam male         109                  NA\n 5         73561 both interview and exam female       173                  NA\n 6         73562 both interview and exam male         156                  NA\n 7         73563 both interview and exam male         100                   5\n 8         73564 both interview and exam female       161                  NA\n 9         73565 interview only          male         142                  NA\n10         73566 both interview and exam female       156                  NA\n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <lgl>, citizen_usa <lgl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\nTo generalize this to all columns that start with `age_` using `across()`, we can use the `starts_with()` select helper, and apply the anonymous function `~{. + 100}`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(across(starts_with(\"age_\"), ~{. + 100}))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male         169                  NA\n 2         73558 both interview and exam male         154                  NA\n 3         73559 both interview and exam male         172                  NA\n 4         73560 both interview and exam male         109                  NA\n 5         73561 both interview and exam female       173                  NA\n 6         73562 both interview and exam male         156                  NA\n 7         73563 both interview and exam male         100                 105\n 8         73564 both interview and exam female       161                  NA\n 9         73565 interview only          male         142                  NA\n10         73566 both interview and exam female       156                  NA\n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <lgl>, citizen_usa <lgl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\n### Convert `born_usa` and `citizen_usa` to numeric (binary) columns using `ends_with()`\n\nThe next example involves convert `born_usa` and `citizen_usa` to numeric (binary) columns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> select(born_usa, citizen_usa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 2\n   born_usa citizen_usa\n   <lgl>    <lgl>      \n 1 TRUE     TRUE       \n 2 TRUE     TRUE       \n 3 TRUE     TRUE       \n 4 TRUE     TRUE       \n 5 TRUE     TRUE       \n 6 TRUE     TRUE       \n 7 TRUE     TRUE       \n 8 TRUE     TRUE       \n 9 TRUE     TRUE       \n10 TRUE     TRUE       \n# ℹ 10,165 more rows\n```\n\n\n:::\n:::\n\n\n\nSince both `born_usa` and `citizen_usa` end with `_usa` (and they are the only columns to do so), we can use the `ends_with()` select helper. In this case, to convert the logical `TRUE/FALSE` values to numeric `0/1` values, the function we are applying is `as.numeric()`. The code below uses `across()` to do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(across(ends_with(\"_usa\"), as.numeric)) |> \n  print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male          69                  NA\n 2         73558 both interview and exam male          54                  NA\n 3         73559 both interview and exam male          72                  NA\n 4         73560 both interview and exam male           9                  NA\n 5         73561 both interview and exam female        73                  NA\n 6         73562 both interview and exam male          56                  NA\n 7         73563 both interview and exam male           0                   5\n 8         73564 both interview and exam female        61                  NA\n 9         73565 interview only          male          42                  NA\n10         73566 both interview and exam female        56                  NA\n   race             six_month_period age_months_ex_0_19yr served_active_duty_us\n   <chr>                       <dbl>                <dbl> <lgl>                \n 1 black                           1                   NA TRUE                 \n 2 white                           1                   NA FALSE                \n 3 white                           2                   NA TRUE                 \n 4 white                           1                  119 NA                   \n 5 white                           1                   NA FALSE                \n 6 mexican american                1                   NA TRUE                 \n 7 white                           2                    6 NA                   \n 8 white                           2                   NA FALSE                \n 9 other hispanic                 NA                   NA FALSE                \n10 white                           1                   NA FALSE                \n   served_active_duty_foreign born_usa citizen_usa time_in_us education_youth\n   <lgl>                         <dbl>       <dbl>      <dbl>           <dbl>\n 1 TRUE                              1           1         NA              NA\n 2 NA                                1           1         NA              NA\n 3 TRUE                              1           1         NA              NA\n 4 NA                                1           1         NA               3\n 5 NA                                1           1         NA              NA\n 6 FALSE                             1           1         NA              NA\n 7 NA                                1           1         NA              NA\n 8 NA                                1           1         NA              NA\n 9 NA                                1           1         NA              NA\n10 NA                                1           1         NA              NA\n   education marital_status pregnant language_english household_income\n       <dbl> <chr>          <chr>    <lgl>                       <dbl>\n 1         3 separated      <NA>     TRUE                        17500\n 2         3 married        <NA>     TRUE                        40000\n 3         4 married        <NA>     TRUE                        70000\n 4        NA <NA>           <NA>     TRUE                        60000\n 5         5 married        <NA>     TRUE                       100000\n 6         4 divorced       <NA>     TRUE                        60000\n 7        NA <NA>           <NA>     TRUE                       100000\n 8         5 widowed        <NA>     TRUE                        70000\n 9         3 married        <NA>     TRUE                       100000\n10         3 divorced       <NA>     TRUE                        17500\n# ℹ 10,165 more rows\n```\n\n\n:::\n:::\n\n\n### Convert `born_usa` and `citizen_usa` to numeric (binary) columns using a vector of column names\n\nSuppose we had a vector of column names that we wanted to modify using `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_cols <- c(\"born_usa\", \"citizen_usa\")\n```\n:::\n\n\nThen we could use `all_of(selected_cols)` in `across()` to apply the function to all columns listed in the `selected_cols` vector as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(across(all_of(selected_cols), as.numeric)) |>\n  print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male          69                  NA\n 2         73558 both interview and exam male          54                  NA\n 3         73559 both interview and exam male          72                  NA\n 4         73560 both interview and exam male           9                  NA\n 5         73561 both interview and exam female        73                  NA\n 6         73562 both interview and exam male          56                  NA\n 7         73563 both interview and exam male           0                   5\n 8         73564 both interview and exam female        61                  NA\n 9         73565 interview only          male          42                  NA\n10         73566 both interview and exam female        56                  NA\n   race             six_month_period age_months_ex_0_19yr served_active_duty_us\n   <chr>                       <dbl>                <dbl> <lgl>                \n 1 black                           1                   NA TRUE                 \n 2 white                           1                   NA FALSE                \n 3 white                           2                   NA TRUE                 \n 4 white                           1                  119 NA                   \n 5 white                           1                   NA FALSE                \n 6 mexican american                1                   NA TRUE                 \n 7 white                           2                    6 NA                   \n 8 white                           2                   NA FALSE                \n 9 other hispanic                 NA                   NA FALSE                \n10 white                           1                   NA FALSE                \n   served_active_duty_foreign born_usa citizen_usa time_in_us education_youth\n   <lgl>                         <dbl>       <dbl>      <dbl>           <dbl>\n 1 TRUE                              1           1         NA              NA\n 2 NA                                1           1         NA              NA\n 3 TRUE                              1           1         NA              NA\n 4 NA                                1           1         NA               3\n 5 NA                                1           1         NA              NA\n 6 FALSE                             1           1         NA              NA\n 7 NA                                1           1         NA              NA\n 8 NA                                1           1         NA              NA\n 9 NA                                1           1         NA              NA\n10 NA                                1           1         NA              NA\n   education marital_status pregnant language_english household_income\n       <dbl> <chr>          <chr>    <lgl>                       <dbl>\n 1         3 separated      <NA>     TRUE                        17500\n 2         3 married        <NA>     TRUE                        40000\n 3         4 married        <NA>     TRUE                        70000\n 4        NA <NA>           <NA>     TRUE                        60000\n 5         5 married        <NA>     TRUE                       100000\n 6         4 divorced       <NA>     TRUE                        60000\n 7        NA <NA>           <NA>     TRUE                       100000\n 8         5 widowed        <NA>     TRUE                        70000\n 9         3 married        <NA>     TRUE                       100000\n10         3 divorced       <NA>     TRUE                        17500\n# ℹ 10,165 more rows\n```\n\n\n:::\n:::\n\n\nWe could also use `any_of(selected_cols)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(across(any_of(selected_cols), as.numeric)) |>\n  print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male          69                  NA\n 2         73558 both interview and exam male          54                  NA\n 3         73559 both interview and exam male          72                  NA\n 4         73560 both interview and exam male           9                  NA\n 5         73561 both interview and exam female        73                  NA\n 6         73562 both interview and exam male          56                  NA\n 7         73563 both interview and exam male           0                   5\n 8         73564 both interview and exam female        61                  NA\n 9         73565 interview only          male          42                  NA\n10         73566 both interview and exam female        56                  NA\n   race             six_month_period age_months_ex_0_19yr served_active_duty_us\n   <chr>                       <dbl>                <dbl> <lgl>                \n 1 black                           1                   NA TRUE                 \n 2 white                           1                   NA FALSE                \n 3 white                           2                   NA TRUE                 \n 4 white                           1                  119 NA                   \n 5 white                           1                   NA FALSE                \n 6 mexican american                1                   NA TRUE                 \n 7 white                           2                    6 NA                   \n 8 white                           2                   NA FALSE                \n 9 other hispanic                 NA                   NA FALSE                \n10 white                           1                   NA FALSE                \n   served_active_duty_foreign born_usa citizen_usa time_in_us education_youth\n   <lgl>                         <dbl>       <dbl>      <dbl>           <dbl>\n 1 TRUE                              1           1         NA              NA\n 2 NA                                1           1         NA              NA\n 3 TRUE                              1           1         NA              NA\n 4 NA                                1           1         NA               3\n 5 NA                                1           1         NA              NA\n 6 FALSE                             1           1         NA              NA\n 7 NA                                1           1         NA              NA\n 8 NA                                1           1         NA              NA\n 9 NA                                1           1         NA              NA\n10 NA                                1           1         NA              NA\n   education marital_status pregnant language_english household_income\n       <dbl> <chr>          <chr>    <lgl>                       <dbl>\n 1         3 separated      <NA>     TRUE                        17500\n 2         3 married        <NA>     TRUE                        40000\n 3         4 married        <NA>     TRUE                        70000\n 4        NA <NA>           <NA>     TRUE                        60000\n 5         5 married        <NA>     TRUE                       100000\n 6         4 divorced       <NA>     TRUE                        60000\n 7        NA <NA>           <NA>     TRUE                       100000\n 8         5 widowed        <NA>     TRUE                        70000\n 9         3 married        <NA>     TRUE                       100000\n10         3 divorced       <NA>     TRUE                        17500\n# ℹ 10,165 more rows\n```\n\n\n:::\n:::\n\n\nThe difference between the two, is that when using `all_of()` all columns in `selected_cols` must be included in the data, whereas this is not necessary for `any_of()`. For example, if one of our columns in `selected_cols` did not exist, then `all_of()` would throw an error, whereas `any_of()` would not:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_cols <- c(\"born_usa\", \"citizen_usa\", \"abc\")\ndemographics |> mutate(across(all_of(selected_cols), as.numeric)) \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `mutate()`:\nℹ In argument: `across(all_of(selected_cols), as.numeric)`.\nCaused by error in `across()`:\nℹ In argument: `all_of(selected_cols)`.\nCaused by error in `all_of()`:\n! Can't subset elements that don't exist.\n✖ Element `abc` doesn't exist.\n```\n\n\n:::\n:::\n\n\nWe could also use `any_of(selected_cols)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(across(any_of(selected_cols), as.numeric)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male          69                  NA\n 2         73558 both interview and exam male          54                  NA\n 3         73559 both interview and exam male          72                  NA\n 4         73560 both interview and exam male           9                  NA\n 5         73561 both interview and exam female        73                  NA\n 6         73562 both interview and exam male          56                  NA\n 7         73563 both interview and exam male           0                   5\n 8         73564 both interview and exam female        61                  NA\n 9         73565 interview only          male          42                  NA\n10         73566 both interview and exam female        56                  NA\n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <dbl>, citizen_usa <dbl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\n## Select helpers summary\n\nSo far we have seen the following \"select helpers\" that can be used to specify the columns inside `across()`:\n\n- `where()` -- across to all columns that satisfy a logical condition (`is.character`)\n\n- `starts_with()` and `ends_with()` -- across all columns that start or ends with a specified string\n\n- `all_of()` and `any_of()` -- across all columns whose names are contained in a character vector, where `all_of()` requires all columns in the vector be present. \n\nAnother common select helper is `contains()` which can be used to select all columns that *contain* a specified string.\n\n\n### Exercise\n\na. For all columns that contain the word \"education\" (`education_youth` and `education`), add the number 5 to each value\n\nb. For all numeric columns, standardize the values by subtracting the mean and dividing by the standard deviation\n\nc. Compute the average age across all columns that start with `age_`\n\nd. Compute the total number of `TRUE` values in the `born_usa`, `citizen_usa`, and `language_english` columns\n\n\n#### Solution\n\na. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemographics |> mutate(across(contains(\"education\"), ~. + 5)) |> \n  print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         73557 both interview and exam male          69                  NA\n 2         73558 both interview and exam male          54                  NA\n 3         73559 both interview and exam male          72                  NA\n 4         73560 both interview and exam male           9                  NA\n 5         73561 both interview and exam female        73                  NA\n 6         73562 both interview and exam male          56                  NA\n 7         73563 both interview and exam male           0                   5\n 8         73564 both interview and exam female        61                  NA\n 9         73565 interview only          male          42                  NA\n10         73566 both interview and exam female        56                  NA\n   race             six_month_period age_months_ex_0_19yr served_active_duty_us\n   <chr>                       <dbl>                <dbl> <lgl>                \n 1 black                           1                   NA TRUE                 \n 2 white                           1                   NA FALSE                \n 3 white                           2                   NA TRUE                 \n 4 white                           1                  119 NA                   \n 5 white                           1                   NA FALSE                \n 6 mexican american                1                   NA TRUE                 \n 7 white                           2                    6 NA                   \n 8 white                           2                   NA FALSE                \n 9 other hispanic                 NA                   NA FALSE                \n10 white                           1                   NA FALSE                \n   served_active_duty_foreign born_usa citizen_usa time_in_us education_youth\n   <lgl>                      <lgl>    <lgl>            <dbl>           <dbl>\n 1 TRUE                       TRUE     TRUE                NA              NA\n 2 NA                         TRUE     TRUE                NA              NA\n 3 TRUE                       TRUE     TRUE                NA              NA\n 4 NA                         TRUE     TRUE                NA               8\n 5 NA                         TRUE     TRUE                NA              NA\n 6 FALSE                      TRUE     TRUE                NA              NA\n 7 NA                         TRUE     TRUE                NA              NA\n 8 NA                         TRUE     TRUE                NA              NA\n 9 NA                         TRUE     TRUE                NA              NA\n10 NA                         TRUE     TRUE                NA              NA\n   education marital_status pregnant language_english household_income\n       <dbl> <chr>          <chr>    <lgl>                       <dbl>\n 1         8 separated      <NA>     TRUE                        17500\n 2         8 married        <NA>     TRUE                        40000\n 3         9 married        <NA>     TRUE                        70000\n 4        NA <NA>           <NA>     TRUE                        60000\n 5        10 married        <NA>     TRUE                       100000\n 6         9 divorced       <NA>     TRUE                        60000\n 7        NA <NA>           <NA>     TRUE                       100000\n 8        10 widowed        <NA>     TRUE                        70000\n 9         8 married        <NA>     TRUE                       100000\n10         8 divorced       <NA>     TRUE                        17500\n# ℹ 10,165 more rows\n```\n\n\n:::\n:::\n\n\nb. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# standardize all numeric columns\ndemographics |> mutate(across(where(is.numeric), ~{(. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE)}))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,175 × 19\n   respondent_id interview_examination   gender age_years age_months_sc_0_2yr\n           <dbl> <chr>                   <chr>      <dbl>               <dbl>\n 1         -1.73 both interview and exam male       1.54               NA    \n 2         -1.73 both interview and exam male       0.922              NA    \n 3         -1.73 both interview and exam male       1.66               NA    \n 4         -1.73 both interview and exam male      -0.921              NA    \n 5         -1.73 both interview and exam female     1.70               NA    \n 6         -1.73 both interview and exam male       1.00               NA    \n 7         -1.73 both interview and exam male      -1.29               -0.776\n 8         -1.73 both interview and exam female     1.21               NA    \n 9         -1.73 interview only          male       0.431              NA    \n10         -1.73 both interview and exam female     1.00               NA    \n# ℹ 10,165 more rows\n# ℹ 14 more variables: race <chr>, six_month_period <dbl>,\n#   age_months_ex_0_19yr <dbl>, served_active_duty_us <lgl>,\n#   served_active_duty_foreign <lgl>, born_usa <lgl>, citizen_usa <lgl>,\n#   time_in_us <dbl>, education_youth <dbl>, education <dbl>,\n#   marital_status <chr>, pregnant <chr>, language_english <lgl>,\n#   household_income <dbl>\n```\n\n\n:::\n:::\n\n\nc. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute average age across all age columns\ndemographics |> summarize(across(starts_with(\"age\"), ~mean(., na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  age_years age_months_sc_0_2yr age_months_ex_0_19yr\n      <dbl>               <dbl>                <dbl>\n1      31.5                10.3                 107.\n```\n\n\n:::\n:::\n\n\nd. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute the total in the `born_usa`, `citizen_usa`, and `language_english`\ndemographics |> summarise(across(any_of(c(\"born_usa\", \"citizen_usa\", \"language_english\")), \n                                 ~sum(., na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  born_usa citizen_usa language_english\n     <int>       <int>            <int>\n1     8262        9220             9100\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}