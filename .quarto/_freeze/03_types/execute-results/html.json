{
  "hash": "9a006c1d8ed7b80db8ee94c1b8ea3d19",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Type\"\nauthor: \"Rebecca Barter\"\nformat: live-html\neditor_options: \n  chunk_output_type: console\nembed-resources: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n<!-- <style> -->\n<!--   .draggable-box { -->\n<!--     position: -webkit-sticky; /* Safari */ -->\n<!--     position: sticky; -->\n<!--     top: 50px; -->\n<!--     padding: 10px; -->\n<!--     background-color: #f0f0f0; -->\n<!--     border: 1px solid #ddd; -->\n<!--     border-radius: 4px; -->\n<!--     box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); -->\n<!--     cursor: move; -->\n<!--   } -->\n<!-- </style> -->\n\n\n<!-- <script> -->\n<!--   // Make the DIV element draggable -->\n<!--   dragElement(document.getElementById(\"draggableBox\")); -->\n\n<!--   function dragElement(element) { -->\n<!--     var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; -->\n<!--     element.onmousedown = dragMouseDown; -->\n\n<!--     function dragMouseDown(e) { -->\n<!--       e = e || window.event; -->\n<!--       e.preventDefault(); -->\n<!--       // Get the mouse cursor position at startup: -->\n<!--       pos3 = e.clientX; -->\n<!--       pos4 = e.clientY; -->\n<!--       document.onmouseup = closeDragElement; -->\n<!--       // Call a function whenever the cursor moves: -->\n<!--       document.onmousemove = elementDrag; -->\n<!--     } -->\n\n<!--     function elementDrag(e) { -->\n<!--       e = e || window.event; -->\n<!--       e.preventDefault(); -->\n<!--       // Calculate the new cursor position: -->\n<!--       pos1 = pos3 - e.clientX; -->\n<!--       pos2 = pos4 - e.clientY; -->\n<!--       pos3 = e.clientX; -->\n<!--       pos4 = e.clientY; -->\n<!--       // Set the element's new position: -->\n<!--       element.style.top = (element.offsetTop - pos2) + \"px\"; -->\n<!--       element.style.left = (element.offsetLeft - pos1) + \"px\"; -->\n<!--     } -->\n\n<!--     function closeDragElement() { -->\n<!--       // Stop moving when mouse button is released: -->\n<!--       document.onmouseup = null; -->\n<!--       document.onmousemove = null; -->\n<!--     } -->\n<!--   } -->\n<!-- </script> -->\n\n\n<!-- <div id=\"draggableBox\" class=\"draggable-box\"> -->\n<!-- ```{webr} -->\n<!-- # playspace -->\n<!-- ``` -->\n<!-- </div> -->\n\n\n\n## Common object types\n\nSo far, we have only worked with numbers in R. But there are many other types (or \"class\") of values that you will encounter in your R journeys. \n\nIn this chapter, we will discuss the following three types (I use the term \"type\" and \"class\" interchangeably):\n\n* **Numeric**: decimal point and integer numbers, e.g., `1`, `3.5`, `1e5`\n\n* **Character**: general unstructured text values, e.g., `\"California\"`, `\"John Doe\"`\n\n* **Logical** (boolean): binary values corresponding to `TRUE` and `FALSE`\n\n\nLet's dive a little deeper into each of these types.\n\n\n### Numeric type\n\nThe following are all examples of numeric type values in R:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n5.3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is scientific notation for  0.000001\n1e-6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1e-06\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can use the `class()` function to ask what type of object a value is. For example, the class of `9.6` is \"numeric\"\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(9.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nSo is the class of `-5`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(-5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nand `1e7` (which is scientific notation for 10,000,000)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1e7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can also use the `class()` funciton to ask the class of *variables*:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 2 * 3 + 1\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\n\n\nIdentify the class of `y`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAs we've already seen, if your object has class \"numeric\", you can do mathematical computations with it:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute y + 2\ny + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute y cubed\ny^3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 343\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n::: {.callout}\n\n## Exercise\n\nFill in the _____ to identify the class of the following value:\n\n\n\n\n\n\n::: {.cell exercise='ex-prod'}\n```{webr}\n#| exercise: ex-prod\n_____(99.9)\n```\n:::\n\n::: {.cell exercise='ex-prod' check='true'}\n```{webr}\n#| exercise: ex-prod\n#| check: true\nif (identical(.result, class(99.9))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"Not quite--Try again!\")\n}\n```\n:::\n\n\n\n\n\n\n:::\n\n\n\n\n\n### Character type\n\nOften data will contain not just numbers, but also text! In R, text has a \"character\" *type* or *class*.\n\nThe following contain examples of character type values:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# print out the value \"banana\"\n\"banana\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"banana\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n\"hello\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n\"I really like owls\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I really like owls\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nWhat is the difference between a variable name and a character value? **Character values are always surrounded by quotes**.\n\nIf I try to type `banana` without the quotes, R will think I am referring to a variable name called `banana` and I will get a mildly rude error:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbanana\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'banana' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nJust like with numbers we can use the `class()` function to identify the class of character values.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"banana\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nJust for fun, let's see what happens when I try it without the quotes:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(banana)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'banana' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\nI get that same pesky `object 'banana' not found` error! Thanks for looking out for me, R. I really appreciate it.\n\n\nOk, let's now define a variable called `char` that contains a character value:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define a variable, char, that contains the character \"banana\"\nchar <- \"banana\"\n```\n:::\n\n\n\n\n\n\n\nNotice that the variable name, `char` doesn't have any quotes, but the value it contains, `\"banana\"` does! \n\nWe can look at what `char` contains by just typing its name:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"banana\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nIt turns out that we can apply the `class()` function not just to standalone values, but we can apply it to variables too. `class()` will then ask the question of what the type of the *value contained within the object* is.\n\nLet's ask what type the *variable* `char` has:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the class of char\nclass(char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nBecause I defined `char` to contain the character value `\"banana\"`, the class/type of `char` itself is \"character\" too! \n\n\n\nOk. Cool. What will happen now if I define a variable that contains the value `\"1\"`?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_one <- \"1\"\nvar_one\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nDid you notice what I did there? I put some super sneaky *quotes* around the `\"1\"`! What do you think the class of `var_one` will be? Why don't you check by running the code in the box below:\n\n\n\n\n\n\n::: {.cell}\n```{webr}\nvar_one <- \"1\"\nclass(var_one)\n```\n:::\n\n\n\n\n\n\n\nDoes the result surprise you? Remember, that whenever a value is surrounded by quotes, it is a character. It doesn't matter whether the value contains a number or not! \n\n\n#### Mathematical computations with character values\n\n\nWhat do you think will happen when you try to do mathematical operations with character (text) variables?\n\nLet's try to do some math with our character variable:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define a character variable\nchar <- \"hello\"\n# try to add 1 to it\nchar + 1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in char + 1: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nThis `Error in char + 1 : non-numeric argument to binary operator` error will become very familiar to you in time. This error is a very unhelpful way that R tells us that we *cannot do mathematical operations with character values*. Bummer. \n\nSo if we can't do math with character values, what's the point of them? Their point is to store text information. Our data will often contain text information, such as country or state, and we will find text data useful to do things like creating groups in our data (e.g., by separating people by their country). I promise characters will be useful, but you'll just have to be patient for like 3 more chapters and get through all this important (boring) foundational stuff first. I hope my lame commentary is helping.\n\n\n### Logical objects\n\n\nLet's move onto \"logical\" or \"boolean\" type values. These are fairly simple because there is only two of them: `TRUE` and `FALSE`. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nFALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nFor your logical value to be recognized as a logical value it must be in all caps. As if you're yelling (LIKE THIS). If you don't yell loud enough, R will complain. For instance, if I only yell the first letter, like this:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrue\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'True' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\nR says `Error: object 'True' not found`, which, if you were paying attention earlier, is code for \"there is no *variable* named `True`. R is trying to find a variable called `True` and it's failing to do so which is unsurprising... because you haven't defined one! It doesn't know you're trying to use a logical `TRUE` value, because you didn't use all caps (i.e, you weren't yelling).\n\nAs with everything else, we can use `class()` to ask the class of logical values, and unsurprisingly, it tells us that the class of logical values are \"logical\":\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Mathematical computations with logical values\n\nLet's define a logical variable containing `TRUE`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogical_var <- TRUE\nlogical_var\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nLet's ask the class of `logical_var`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the class of logical_var\nclass(logical_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nPhew, it's logical.\n\nNow, let's ask the golden question: can we do mathematical operations with logical values? Let's try:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Try to subtract 3 from logical_var\nlogical_var - 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Try to add 0.2 to FALSE\nFALSE + 0.2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYay! It works... But what is it doing? \n\nIf you could choose any numbers to convert `TRUE` and `FALSE` to, what would you choose? I would probably choose `TRUE` to be `1` and `FALSE` to be `0`. Fortunately for me, this is exactly what R does. \n\nIf you replaced `TRUE` (which is what `logical_var` contains) with `1` and `FALSE` with `0` in the code chunk above, does the output make sense now? \n\n\n\n\n\n\n::: {.callout}\n\n## Exercise\n\nWhich of the following computations will work? What will their output be?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"TRUE\" * 4\n\"banana\" + \"apple\"\nFALSE + 5\nTRUE + \"TRUE\"\n```\n:::\n\n\n\n\n\n\n\nFeel free to check your guesses by typing the relevant code in the box below.\n\n\n\n\n\n\n::: {.cell}\n```{webr}\n\n```\n:::\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n## Type conversions\n\nLet's define a numeric variable.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define a numeric variable, numeric_var, containing 12.5\nnumeric_var <- 12.5\n```\n:::\n\n\n\n\n\n\nWhat if I told you that I could convert this numeric variable to another type? Is your mind blown? Probably not, and that's ok.\n\n\n\nLet's try to convert the numeric object to a character type using the `as.character()` function. As you may have guessed, `as.character()` tries to convert whatever object given inside its parentheses (i.e., its \"argument\") to a character type.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# apply as.character() to numeric_var\nas.character(numeric_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"12.5\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nDid it work? Notice that the 12.5 has some quotes around it now. That means that it's not a numeric value anymore. It's now a *text* (character) value that contains a number. This means that you can't do math with it. I'm a rebel though, so I'm going to try anyway: \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(numeric_var) * 5\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in as.character(numeric_var) * 5: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\n\n\n\nDang. Well I guess this should have been expected since the output (result) of `as.character()` is probably going to be a character... I can apply the `class()` function to the character value created by `as.character(numeric_var)` by placing `as.character(numeric_var)` inside the `class()` parentheses:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(as.character(numeric_var))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis code is \"nesting\" the `class()` and `as.character()` functions.\n\n\n\n\nDo you think that running the `as.character(numeric_var)` code has *modified* the `numeric_var` object at all (i.e., does using `as.character()` on a variable actually convert that variable to a character type... or does it just print out the character type version of the variable)? \n\nYou can check by just outputting the `numeric_var` object by typing its name:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeric_var\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12.5\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNotice there are no quotes, so it's a numeric-type object. We can also confirm this using the class function:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(numeric_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nIf we wanted to update the `numeric_var` object so that it had a character type, we would need to \"reassign\" it to the output of `as.character(numeric_var)`. This would overwrite the old `numeric_var` and replace it with the new character version. I don't want to do this though, so I'm not going to run this code.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To overwrite numeric_var with a character version, run:\nnumeric_var <- as.character(numeric_var)\n```\n:::\n\n\n\n\n\n\n\nJust as there is an `as.character()` function, there is also an `as.numeric()` function (there's also an `as.logical()` funciton, but I don't think I've ever actually had to use it)\n\nRather than bore you to bits by outlining all of the possible conversions you can do with `as.numeric()` and `as.character()`, I'm going to give you the opportunity to learn yourself in the code block below.\n\n\n\n\n\n\n\n::: {.cell}\n```{webr}\n\n```\n:::\n\n\n\n\n\n\n\nBy using your brain and then playing around with the `as.numeric()` and `as.character()` functions in the code block above (e.g., type `as.character(TRUE)` in the code block above to fill in the first blank cell), try to fill in the following table (I've already filled in the first row for you!):\n\n| `value` | Original type | `as.character(value)` | `as.numeric(value)`|\n|:-----|:----|:----|:-----|\n| `12.5` | numeric | `\"12.5\"` | `12.5` |\n| `TRUE` | logical |  |  | \n| `FALSE` | logical | |  | \n| `\"howdy\"` | character | | |\n| `\"99\"` | character | | |\n| `\"1,200\"` | character | | |\n\n\n\nPay particular attention to what happens when you apply `as.numeric()` to `TRUE` and `FALSE` as well as to `\"howdy\"` and `\"1,200\"`. \n\n## `NA` values\n\nWhen you run `as.numeric(\"howdy\")` or `as.numeric(\"1,200\")`, you should get an `NA` value, which is a *missing value*, along with a warning: \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(\"howdy\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs introduced by coercion\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nUnlike an error, which means that your code did not actually run, a *warning* runs your code, but R is telling you it's not happy with you. When you get a warning, it's a good idea to take a pause and consider that perhaps your code may not have run as expected.\n\nThe warning here, `NAs introduced by coercion` happens when you try to convert characters to numbers... **Characters cannot be converted to numbers**, unless the character contains a number without any additional characters, as you should have seen when filling in your table above. \n\nThis works:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(\"99\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 99\n```\n\n\n:::\n:::\n\n\n\n\n\n\nBut\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(\"1,200\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs introduced by coercion\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\n\n\ngives you an `NA` and a warning. `1,200` may look like a number, but the presence of the comma `,` means that R cannot parse the number inside the quotes. R is a bit dumb sometimes. What is obvious to us is not always obvious to our computer overlords.\n\nLet's talk briefly about the `NA` value (missing values). They are everywhere. You will often find that once present, missing values have a way of permeating your existence.\n\nA missing value, `NA`, is a special type of object. Like `TRUE` and `FALSE`, your `NA` must be in all caps (i.e., you must yell when you type it).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is the NA value\nNA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# R thinks this is a variable\nna\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'na' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n::: {.callout}\n## Exercise\n\nWithout running the following pieces of code, what do you think the output will be?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(\"TRUE\") + 3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(TRUE + 12)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(as.numeric(\"35\"))\n```\n:::\n\n\n\n\n\n\n\nHere is a code block to test your answers.\n\n\n\n\n\n\n::: {.cell}\n```{webr}\n\n```\n:::\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n## Asking questions with logical operations\n\n\n\nJust because we can, let's go ahead and create two band-new numeric variables. And because I lack originality, I'll just call them `x` and `y`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\ny <- 4\n```\n:::\n\n\n\n\n\n\nI'm now going to ask R some questions about `x` and `y`. That's right. You can ask R questions. Now, the answer probably isn't going to be as sophisticated as an answer generated by ChatGPT's, but it's going to be just as powerful. Maybe. If you squint. Really hard.\n\nFirst question: *\"Is x equal to 2?\"*\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# is x equal to 2?\nx == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWow. The answer is \"Yes!\" But in R-speak, \"Yes!\" is `TRUE`. Thanks R. To ask a question of equality, we used two equals symbols `==`.\n\nNext question: *\"Is `x` less than or equal to `1`?\"* \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ask is x less than or equal to 1\nx <= 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAgain, R came through with an answer (this time `FALSE`). To ask a question of \"less than or equal to\", we used two equals symbols `<=`.\n\nBoth `==` and `<=` kind of look like the assignment operators `=` and `<-`. But they're not. They're completely different (like the words \"buy\" and \"bay\" look similar, but they're totally unrelated). \n\n`==` and `<=` are \"question asking\" operators, or \"*logical operators*\" if you want to sound fancy (they're called \"logical operators\" because they always result in a `TRUE` or `FALSE` logical result).\n\n\nBefore we asked if `x` was equal to `2` (`x == 2`), but we can also ask whether `x` is equal to `y`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Is x equal to y?\nx == y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nAs well as \"is `x` *not* equal to y\" using the \"not equal to\" logical question operator `!=`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Is x *not* equal to y?\nx != y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nFor any logical question we ask, we can ask it's *inverse* by placing the original question in parentheses and prefacing with a `!`. So the following is another way to ask `x != y`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!(x == y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\nHere are some more questions:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# is x strictly greater than y?\nx > y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# is x greater than or equal to y\nx >= y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# is x strictly less than y\nx < y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nIf you'd like to practice, add some code to the cell below to ask questions about `a` and `b`:\n\n\n\n\n\n\n::: {.cell}\n```{webr}\na <- 5\nb <- 10\n# replace this code comment with your question\n\n```\n:::\n\n\n\n\n\n\nCool stuff. It's almost like we're talking to R and it's *replying!* But for real though, this is going to be really important in a little while, so I hope you're paying attention. \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}