{
  "hash": "a01459067a6eefe7af3cc02f104ed71c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Writing R code\"\nauthor: \"Rebecca Barter\"\nformat: live-html\nembed-resources: true\n---\n\n\n\n\n\n\n\n\n\n\n\n\n## Using R as a calculator \n\nWho needs a calculator, when you have R! For real though, I legitimately use R as a basic calculator all the time. \n\nYou can do all kinds of math(s) in R. Here are some helpful math symbols:\n\n* Parentheses: `(`, `)`\n* Exponents: `^` or `**`\n* Multiply: `*`\n* Divide: `/`\n* Add: `+`\n* Subtract: `-`\n\nIf you're wondering where to write your R math code, let me direct you to the console in RStudio. It looks like this:\n\n?????put a picture of RStudio with the console\n\nWhen you write R code in the console, the output of your code will be shown underneath the code. Like this:\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\nTry it out yourself in your own RStudio console on your computer.\n\n\nThroughout this book, you'll also see lots of code boxes like the one below below. If you write your r code in one of these boxes, you will also find that your \"ourput\" (the result of your code) will be shown underneath the code box after you hit \"Run code\". Give it a go:\n\n\n\n::: {.callout}\n## Exercise\n\nCompute $3^2$ in your RStudio console or in the code box below\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell exercise='ex2'}\n\n```{.webr .cell-code}\n\n```\n:::\n\n::: {.cell exercise='ex2' check='true'}\n\n```{.webr .cell-code}\nif (identical(.result, 3^2)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"Not quite--Try again!\")\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n::: {.callout}\n## Exercise\n\nCompute 2 divided by 100,000 in your RStudio console or in the code box below. \n\n*Hint*: Two things: your output is going to look weird AND I'm trying to trick you into making a mistake. Don't feel bad. This is just the part of your learning journey where I get to make myself feel superior. If you didn't get my passive-aggressive error message, congratulations. You're very smart. Give yourself a high five.\n\n\n\n\n\n\n\n\n\n\n::: {.cell exercise='ex3'}\n\n```{.webr .cell-code}\n\n```\n:::\n\n::: {.cell exercise='ex3' check='true'}\n\n```{.webr .cell-code}\nif (identical(.result, 2 / 100000)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"R doesn't like commas.\")\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n????Update with correct answer option\n\n\n\n### Scientific notation\n\n\n\nIn the above example, note that numbers should not involve commas in R (e.g., `100,000` should be written `100000`) If you are getting an error message that says `unexpected ','`, try removing the comma from your number.\n\nEven if you didn't get an error, you might notice that your output (result) looks a little bit strange. In R, very large and very small numbers are displayed using *scientific notation*. For example, `2e-05` means \"0.00002\", i.e., a 2 in the 5th decimal place. On the other hand, `2e+05` (with a `+` instead of `-`), corresponds to 200000, i.e., \"2\" with 5 0's after it. \n\n\n\n\n::: {.callout}\n## Exercise\n\nCompute 2 multiplied by 100,000 in your RStudio console or in the code box below\n\n\n\n\n\n\n\n\n\n\n::: {.cell exercise='ex5'}\n\n```{.webr .cell-code}\n\n```\n:::\n\n::: {.cell exercise='ex5' check='true'}\n\n```{.webr .cell-code}\nif (identical(.result, 2 * 100000)) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"Not quite--Try again!\")\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n\n\n### Mathematical functions\n\nSometimes you will need to use more complex mathematical operations in your computations, such as the logarithm, exponential, and square-root. Fortunately there are *functions* in R that let you compute these operations. \n\nA function is a piece of R code that is given an alias/name. To apply a function to a value, you write the name of the function, followed by some parentheses, inside which you provide the value, as in: `function(value)`.\n\nIf you have a value, say `2`, you can apply the square-root, logarithm, and exponential functions by writing `sqrt(2)`, `log(2)`, or `exp(2)`, respectively. \n\n| Mathematical function | R function |\n|:----------|:------------|\n|Square-root ($\\sqrt{x}$) | `sqrt(x)` |\n|Logarithm ($\\log(x)$) | `log(x)` |\n|Exponential ($e^x$) | `exp(x)` |\n\n::: {.callout}\n## Exercise\n\nUse the logarithm function `log()` to compute the logarithm of 10 in your RStudio console or in the code box below\n\n\n\n\n\n\n\n\n\n\n::: {.cell exercise='ex-log'}\n\n```{.webr .cell-code}\n\n```\n:::\n\n::: {.cell exercise='ex-log' check='true'}\n\n```{.webr .cell-code}\nif (identical(.result, log(10))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"Not quite--Try again!\")\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n\n\n\n::: {.callout}\n## Exercise\n\nCompute $e^5$ in your RStudio console or in the code box below\n\n\n\n\n\n\n\n\n\n\n::: {.cell exercise='ex-exp'}\n\n```{.webr .cell-code}\n\n```\n:::\n\n::: {.cell exercise='ex-exp' check='true'}\n\n```{.webr .cell-code}\nif (identical(.result, exp(5))) {\n  list(correct = TRUE, message = \"Nice work!\")\n} else {\n  list(correct = FALSE, message = \"Not quite--Try again!\")\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n## Writing code in the console vs in a quarto document\n\n\nThe problem with only ever writing your R code in the R console is that once you quit RStudio, there will be no record of the code that you ran.\n\nWriting your code in a quarto document will save your code and results in a *reproducible* way AND help you to communicate your findings to other people.\n\n\nRecall that in a quarto .qmd document you can create a new R code chunk by writing three backticks with some curly parentheses and the letter R. \n\n```{{r}}\n\n\n```\n\nYou can write your code inside a code chunk, and its output will be shown underneath the code chunk in the rendered HTML document (after you hit the \"Render\" button), such as:\n\n```{{r}}\n1 + 1\n```\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout}\n## Exercise\n\nDelete the contents of your analysis.qmd quarto document that you created, but keep the YAML header text that looks like this.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.raw .cell-code}\n---\ntitle: \"An analysis of global life expectancy\"\nauthor: \"Rebecca Barter\"\nformat: html\n---\n```\n:::\n\n\n\n\n\n\n\n\n\n\nAfter this YAML header text, create a new code chunk and compute the logarithm of 999. Render your quarto document by hitting the \"Render\" button. \n\n:::\n\n\n\n\n\n\n\n\n\n\n### Code chunks\n\n\nIn a quarto document, like this one, you will write your r code in \"code chunks\" like this box below:\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n\n\nFor example, you can ask R to compute 1+1:\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nYou can view the \"output\" (result) of your code by either (a) *rendering* your quarto document, or (b) running your code in the *console*.\n\n\n*Question:* Why is there a `[1]` before the output (`[1] 2`)? This is just specifying that `2` is the first \"entry\" of the output.\n\n\n\n::: {.callout}\n## Exercise\n\nCreate a new code chunk and compute 4 times 5\n:::\n\n\nSolution: \n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4 * 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout}\n## Exercise\n\nInside your code chunk above, add some code to compute 3 squared (`3^2`). What do you think will happen when you render your document? Will both lines of code be computed, or just the final one?\n:::\n\n\nSolution: \n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4 * 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n\n```{.r .cell-code}\n3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Code comments\n\nR will ignore any text that follows a `#` symbol, so we can add \"comments\" to our code using `#` to make it easier to understand. \n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute 4 times 5\n4 * 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute 3 squared\n3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Chunk options\n\nTake a look at the following code chunk. \n\nWhat do you think this code chunk will look like in the rendered html document?\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis `#|` syntax at the beginning of a code chunk corresponds to various options for when the code chunk is \"rendered\" into html (or pdf).\n\n`#| echo: false` hides the code from the html output file, while still showing the output (`[1] 4`). \n\n\n\n\n\n::: {.callout}\n## Exercise\n\nCan you figure out what the output of the following code chunk will look like (will the code and code comment be shown in the output)? \n\n``` {{r}}\n#| echo: true\n\n# two times three\n2 * 3\n```\n:::\n\n\n\n\n\n\n",
    "supporting": [
      "01_r_code_intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}