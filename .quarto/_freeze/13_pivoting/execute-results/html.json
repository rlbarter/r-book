{
  "hash": "c90e2a36db80d4b8555143a17feb4f8d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reshaping (Pivoting) Data\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\nIn this lesson, we will be working with a new NHANES table that contains urine albumin and creatinine *lab* data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlabs_data <- read.csv(\"data/urine_albumin_creatinine.csv\")\n```\n:::\n\n\nTaking a look at the first 10 rows, it is clear that this data is in a **long format**. This means that each \"observational unit\" (in this case, each survey respondent) has multiple rows in the data, and the *names* of the variables being measured (the types of labs) are all contained in a single row (called `labs`) and the *values* of each of the variables being measured are all contained in a single row (called `measurements`). Note that each respondent has 5 rows each:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(labs_data, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   respondent_id                         lab measurement\n1          73557            ur_albumin_ug_ml        4.30\n2          73557             ur_albumin_mg_l        4.30\n3          73557         ur_creatinine_mg_dl       39.00\n4          73557        ur_creatinine_umol_l     3447.60\n5          73557 ur_albumin_creatinine_ratio       11.03\n6          73558            ur_albumin_ug_ml      153.00\n7          73558             ur_albumin_mg_l      153.00\n8          73558         ur_creatinine_mg_dl       50.00\n9          73558        ur_creatinine_umol_l     4420.00\n10         73558 ur_albumin_creatinine_ratio      306.00\n```\n\n\n:::\n:::\n\n\nA **wide format**, on the other hand, will only have *one* row for each observational unit (respondent), and each of the individual variables being measured (the labs) will have their own column, each containing the *values* for the corresponding lab.\n\nYou can convert from a long format to a wide format using the `pivor_wider()` function. The main arguments that you need to provide is the name of the columns that you want to pivot, specifically, the column that contains the variable names (you provide this to the `names_from` argument) and the column that contains the variable measurements (you provide this to the `values_from` argument).\n\nThe code below creates a wide-form version of the labs data, and saves it as a new data frame called `labs_data_wide`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabs_data_wide <- labs_data |> \n  pivot_wider(names_from = \"lab\", values_from = \"measurement\")\nlabs_data_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,291 × 6\n   respondent_id ur_albumin_ug_ml ur_albumin_mg_l ur_creatinine_mg_dl\n           <int>            <dbl>           <dbl>               <dbl>\n 1         73557              4.3             4.3                  39\n 2         73558            153             153                    50\n 3         73559             11.9            11.9                 113\n 4         73560             16              16                    76\n 5         73561            255             255                   147\n 6         73562            123             123                    74\n 7         73564             19              19                   242\n 8         73566              1.3             1.3                  18\n 9         73567             35              35                   215\n10         73568             25              25                    31\n# ℹ 8,281 more rows\n# ℹ 2 more variables: ur_creatinine_umol_l <dbl>,\n#   ur_albumin_creatinine_ratio <dbl>\n```\n\n\n:::\n:::\n\n\nIf you want to instead convert from a wide format dataset into a longer-format dataset, you can instead use the `pivot_longer()` function. The main argument you need to provide to `pivot_longer()` is `cols` which contains the names of the columns that will be pivoted into a single pair of `name` and `value` columns. You can change the names of the resulting `name` and `value` columns using the `names_to` and `values_to` arguments of `pivot_longer()`.\n\nThe following code takes the wide-format version of the labs data and pivots it back into the original long-format version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabs_data_wide |> pivot_longer(cols = starts_with(\"ur_\"), names_to = \"lab\", values_to = \"measurement\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 41,455 × 3\n   respondent_id lab                         measurement\n           <int> <chr>                             <dbl>\n 1         73557 ur_albumin_ug_ml                    4.3\n 2         73557 ur_albumin_mg_l                     4.3\n 3         73557 ur_creatinine_mg_dl                39  \n 4         73557 ur_creatinine_umol_l             3448. \n 5         73557 ur_albumin_creatinine_ratio        11.0\n 6         73558 ur_albumin_ug_ml                  153  \n 7         73558 ur_albumin_mg_l                   153  \n 8         73558 ur_creatinine_mg_dl                50  \n 9         73558 ur_creatinine_umol_l             4420  \n10         73558 ur_albumin_creatinine_ratio       306  \n# ℹ 41,445 more rows\n```\n\n\n:::\n:::\n\n\nIt is *not* necessarily the case that either one of the long-format versus the wide-format is *always* better than the other. Which one makes more sense will depend on what you plan to do with the data. For example, if you plan to join your labs dataset onto the demographics data that we have been working with previously (you will see this in the next lesson), then you will need to have a single row for each observational unit, and therefore, the wide format is better.\n\nHowever, if you want to create a visualization that compares the different variables using ggplot2, it is a lot easier if all of the variables appear in a long (name and value column) format. For example, it is much easier to create some boxplots comparing each of the lab measurement distributions using the original long format than the wide format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create boxplots using the long format\nlabs_data |> ggplot() + \n  geom_boxplot(aes(x = lab, y = measurement))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1195 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](13_pivoting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "13_pivoting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}